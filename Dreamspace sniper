const { Client } = require('discord.js-selfbot-v13');
const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));
const fs = require('fs');

const client = new Client();

const allowedChannels = [
  '1352152911009939526', // Updated channel ID
];

// Path to store dreamspace spam data and blacklisted users
const dreamspaceSpamDataPath = './dreamspace_spam.json';
const blacklistUsersPath = './blacklistuser.json';
const blacklistWordsPath = './blacklistword.json'; // Path for blacklisted words

// Define your dreamspace ping role ID
const dreamspacePingRoleId = '1347995682572603422'; // Your dreamspace ping role ID

// Function to load dreamspace spam data from JSON
function loadDreamspaceSpam() {
  if (fs.existsSync(dreamspaceSpamDataPath)) {
    return JSON.parse(fs.readFileSync(dreamspaceSpamDataPath, 'utf8'));
  }
  return {};
}

// Function to save dreamspace spam data to the file
function saveDreamspaceSpam(data) {
  fs.writeFileSync(dreamspaceSpamDataPath, JSON.stringify(data, null, 2), 'utf8');
}

// Function to load blacklist user IDs
function loadBlacklistUsers() {
  if (fs.existsSync(blacklistUsersPath)) {
    return JSON.parse(fs.readFileSync(blacklistUsersPath, 'utf8'));
  }
  return [];
}

// Function to save blacklist user IDs
function saveBlacklistUsers(data) {
  fs.writeFileSync(blacklistUsersPath, JSON.stringify(data, null, 2), 'utf8');
}

// Function to load blacklisted words
function loadBlacklistWords() {
  if (fs.existsSync(blacklistWordsPath)) {
    return JSON.parse(fs.readFileSync(blacklistWordsPath, 'utf8'));
  }
  return [];
}

// Function to save blacklisted words
function saveBlacklistWords(data) {
  fs.writeFileSync(blacklistWordsPath, JSON.stringify(data, null, 2), 'utf8');
}

// Function to detect variations of "dreamspace"
function isDreamspaceWord(content) {
  const dreamspacePatterns = [
    /\bdreamspace\w*\b/i,
    /d+r+e+a+m+s+p+a+c+e+\b/i
  ];
  return dreamspacePatterns.some((pattern) => pattern.test(content));
}

// Function to match Roblox private server link
function extractPrivateServerLink(content) {
  const regex = /https:\/\/www\.roblox\.com\/games\/\d+\?privateServerLinkCode=[a-zA-Z0-9]+/i;
  return content.match(regex) ? content.match(regex)[0] : null;
}

// Function to match Roblox share link
function extractShareLink(content) {
  const regex = /https:\/\/www\.roblox\.com\/share\?code=[a-zA-Z0-9]+&type=server/i;
  return content.match(regex) ? content.match(regex)[0] : null;
}

client.on('ready', () => {
  console.log(`${client.user.username} is ready!`);
});

// Event listener for new messages
client.on('messageCreate', async (message) => {
  if (message.author.id === client.user.id) return; // Ignore self-messages
  if (!allowedChannels.includes(message.channel.id)) return; // Ignore other channels

  const content = message.content.toLowerCase();
  console.log(`Received message: ${content}`);

  // Load blacklisted words
  const blacklistedWords = loadBlacklistWords();

  // Check if the message contains blacklisted words
  if (blacklistedWords.some((word) => content.includes(word.toLowerCase()))) {
    console.log("Message contains blacklisted word, ignoring...");
    return; // Ignore message if it contains a blacklisted word
  }

  // Check for "dreamspace" and a valid Roblox link
  const containsDreamspace = isDreamspaceWord(content);
  const privateServerLink = extractPrivateServerLink(content);
  const shareLink = extractShareLink(content);

  if (containsDreamspace && (privateServerLink || shareLink)) {
    let dreamspaceSpamData = loadDreamspaceSpam();
    const lastAttempt = dreamspaceSpamData[message.author.id] || 0;
    const timeSinceLastAttempt = Date.now() - lastAttempt;

    if (timeSinceLastAttempt < 2 * 60 * 1000) { // 2 minutes cooldown
      return; // Ignore if spamming
    }

    dreamspaceSpamData[message.author.id] = Date.now(); // Update timestamp for the user
    saveDreamspaceSpam(dreamspaceSpamData); // Save the updated data

    const webhookURL = 'https://discord.com/api/webhooks/1352156074668720249/EoSzVht3SXO7a802qHY8_fCJ_Q4hX2ASgviQWNhtlFMfhnJqCPp4p_qE102dRmv4VVqT'; // New webhook URL

    const messageLink = `https://discord.com/channels/${message.guild.id}/${message.channel.id}/${message.id}`; // Create message link

    const payload = {
      content: `<@&${dreamspacePingRoleId}>`, // Dreamspace ping role
      username: 'Dreamspace Snipes',
      embeds: [{
        color: 0xFF69B4, // Adjust as needed
        title: `Dreamspace Detected`,
        thumbnail: {
          url: 'https://raw.githubusercontent.com/MOBILERVERISON/Glitch-pfp/refs/heads/main/Picsart_25-03-28_08-32-58-220.jpg' // Your thumbnail URL
        },
        fields: [
          {
            name: 'Dreamspace Poster',
            value: `${messageLink}`, // Clickable link instead of raw message
            inline: false
          },
          {
            name: 'User',
            value: `<@${message.author.id}> | (${message.author.id})`,
            inline: true
          },
          {
            name: 'Private Server Link',
            value: privateServerLink || shareLink || 'No link detected',
            inline: false
          },
          {
            name: 'Content',
            value: `\`\`\`${content}\`\`\``, // Content in code block format
            inline: false
          }
        ],
        footer: {
          text: `Powered by Termux`, // Server info
        },
        timestamp: new Date(),
      }]
    };

    try {
      const response = await fetch(webhookURL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      if (response.ok) {
        console.log("Message sent to webhook.");
      } else {
        console.error("Failed to send message, status: " + response.status);
      }
    } catch (err) {
      console.error("Error sending to webhook:", err);
    }
  } else {
    console.log("No dreamspace or valid Roblox link detected.");
  }
});

// Event listener for message deletion (blacklist user when deleting message)
client.on('messageDelete', async (message) => {
  if (!message || !message.author || !message.author.id) return; // Ensure valid message data

  if (message.author.id === client.user.id) return;
  if (!allowedChannels.includes(message.channel.id)) return;

  const content = message.content.toLowerCase();
  const blacklistUsers = loadBlacklistUsers();

  if (blacklistUsers.includes(message.author.id)) return; // Ignore already blacklisted users

  if (content.includes('dreamspace') || content.includes('roblox')) {
    blacklistUsers.push(message.author.id);
    saveBlacklistUsers(blacklistUsers);

    const payload = {
      username: 'Blacklist Notifier',
      content: `**${message.author.id}** has been blacklisted for deleting their message.`
    };

    try {
      const response = await fetch(webhookURL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      if (response.ok) console.log(`User ${message.author.id} blacklisted.`);
    } catch (err) {
      console.error("Error sending to webhook:", err);
    }
  }
});

client.login('YOUR DISCORD ACCOUNT TOKEN'); // Replace with your actual token
